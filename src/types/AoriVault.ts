/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type InstructionStruct = {
  to: AddressLike;
  value: BigNumberish;
  data: BytesLike;
};

export type InstructionStructOutput = [
  to: string,
  value: bigint,
  data: string
] & { to: string; value: bigint; data: string };

export type FlashLoanStruct = {
  tokens: AddressLike[];
  amounts: BigNumberish[];
};

export type FlashLoanStructOutput = [tokens: string[], amounts: bigint[]] & {
  tokens: string[];
  amounts: bigint[];
};

export interface AoriVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aoriProtocol"
      | "execute"
      | "flashExecute"
      | "isValidSignature"
      | "managers"
      | "receiveFlashLoan"
      | "setManager"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;

  encodeFunctionData(
    functionFragment: "aoriProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [InstructionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flashExecute",
    values: [FlashLoanStruct, InstructionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFlashLoan",
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "aoriProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace CallEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [to: string, value: bigint, data: string];
  export interface OutputObject {
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AoriVault extends BaseContract {
  connect(runner?: ContractRunner | null): AoriVault;
  waitForDeployment(): Promise<this>;

  interface: AoriVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aoriProtocol: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [instructions: InstructionStruct[]],
    [void],
    "payable"
  >;

  flashExecute: TypedContractMethod<
    [loan: FlashLoanStruct, instructions: InstructionStruct[]],
    [void],
    "payable"
  >;

  isValidSignature: TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  managers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  receiveFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      arg2: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [_manager: AddressLike, _isManager: boolean],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aoriProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [instructions: InstructionStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "flashExecute"
  ): TypedContractMethod<
    [loan: FlashLoanStruct, instructions: InstructionStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveFlashLoan"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      arg2: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<
    [_manager: AddressLike, _isManager: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Call"
  ): TypedContractEvent<
    CallEvent.InputTuple,
    CallEvent.OutputTuple,
    CallEvent.OutputObject
  >;

  filters: {
    "Call(address,uint256,bytes)": TypedContractEvent<
      CallEvent.InputTuple,
      CallEvent.OutputTuple,
      CallEvent.OutputObject
    >;
    Call: TypedContractEvent<
      CallEvent.InputTuple,
      CallEvent.OutputTuple,
      CallEvent.OutputObject
    >;
  };
}
