/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type InstructionStruct = {
  to: AddressLike;
  value: BigNumberish;
  data: BytesLike;
};

export type InstructionStructOutput = [
  to: string,
  value: bigint,
  data: string
] & { to: string; value: bigint; data: string };

export declare namespace IAoriV2 {
  export type OrderStruct = {
    offerer: AddressLike;
    inputToken: AddressLike;
    inputAmount: BigNumberish;
    inputChainId: BigNumberish;
    inputZone: AddressLike;
    outputToken: AddressLike;
    outputAmount: BigNumberish;
    outputChainId: BigNumberish;
    outputZone: AddressLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    salt: BigNumberish;
    counter: BigNumberish;
    toWithdraw: boolean;
  };

  export type OrderStructOutput = [
    offerer: string,
    inputToken: string,
    inputAmount: bigint,
    inputChainId: bigint,
    inputZone: string,
    outputToken: string,
    outputAmount: bigint,
    outputChainId: bigint,
    outputZone: string,
    startTime: bigint,
    endTime: bigint,
    salt: bigint,
    counter: bigint,
    toWithdraw: boolean
  ] & {
    offerer: string;
    inputToken: string;
    inputAmount: bigint;
    inputChainId: bigint;
    inputZone: string;
    outputToken: string;
    outputAmount: bigint;
    outputChainId: bigint;
    outputZone: string;
    startTime: bigint;
    endTime: bigint;
    salt: bigint;
    counter: bigint;
    toWithdraw: boolean;
  };

  export type MatchingDetailsStruct = {
    makerOrder: IAoriV2.OrderStruct;
    takerOrder: IAoriV2.OrderStruct;
    makerSignature: BytesLike;
    takerSignature: BytesLike;
    blockDeadline: BigNumberish;
    seatNumber: BigNumberish;
    seatHolder: AddressLike;
    seatPercentOfFees: BigNumberish;
  };

  export type MatchingDetailsStructOutput = [
    makerOrder: IAoriV2.OrderStructOutput,
    takerOrder: IAoriV2.OrderStructOutput,
    makerSignature: string,
    takerSignature: string,
    blockDeadline: bigint,
    seatNumber: bigint,
    seatHolder: string,
    seatPercentOfFees: bigint
  ] & {
    makerOrder: IAoriV2.OrderStructOutput;
    takerOrder: IAoriV2.OrderStructOutput;
    makerSignature: string;
    takerSignature: string;
    blockDeadline: bigint;
    seatNumber: bigint;
    seatHolder: string;
    seatPercentOfFees: bigint;
  };
}

export interface AoriVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterAoriTrade"
      | "beforeAoriTrade"
      | "execute"
      | "isValidSignature"
      | "managers"
      | "setManager"
      | "supportsInterface"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;

  encodeFunctionData(
    functionFragment: "afterAoriTrade",
    values: [IAoriV2.MatchingDetailsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAoriTrade",
    values: [IAoriV2.MatchingDetailsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [InstructionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterAoriTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAoriTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace CallEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [to: string, value: bigint, data: string];
  export interface OutputObject {
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AoriVault extends BaseContract {
  connect(runner?: ContractRunner | null): AoriVault;
  waitForDeployment(): Promise<this>;

  interface: AoriVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterAoriTrade: TypedContractMethod<
    [matching: IAoriV2.MatchingDetailsStruct, hookData: BytesLike],
    [boolean],
    "nonpayable"
  >;

  beforeAoriTrade: TypedContractMethod<
    [matching: IAoriV2.MatchingDetailsStruct, hookData: BytesLike],
    [boolean],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [instructions: InstructionStruct[]],
    [void],
    "payable"
  >;

  isValidSignature: TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  managers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  setManager: TypedContractMethod<
    [_manager: AddressLike, _isManager: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdrawAll: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterAoriTrade"
  ): TypedContractMethod<
    [matching: IAoriV2.MatchingDetailsStruct, hookData: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeAoriTrade"
  ): TypedContractMethod<
    [matching: IAoriV2.MatchingDetailsStruct, hookData: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [instructions: InstructionStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<
    [_manager: AddressLike, _isManager: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Call"
  ): TypedContractEvent<
    CallEvent.InputTuple,
    CallEvent.OutputTuple,
    CallEvent.OutputObject
  >;

  filters: {
    "Call(address,uint256,bytes)": TypedContractEvent<
      CallEvent.InputTuple,
      CallEvent.OutputTuple,
      CallEvent.OutputObject
    >;
    Call: TypedContractEvent<
      CallEvent.InputTuple,
      CallEvent.OutputTuple,
      CallEvent.OutputObject
    >;
  };
}
