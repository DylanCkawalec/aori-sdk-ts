/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type OfferItemStruct = {
  itemType: BigNumberish;
  token: AddressLike;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
};

export type OfferItemStructOutput = [
  itemType: bigint,
  token: string,
  identifierOrCriteria: bigint,
  startAmount: bigint,
  endAmount: bigint
] & {
  itemType: bigint;
  token: string;
  identifierOrCriteria: bigint;
  startAmount: bigint;
  endAmount: bigint;
};

export type ConsiderationItemStruct = {
  itemType: BigNumberish;
  token: AddressLike;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
  recipient: AddressLike;
};

export type ConsiderationItemStructOutput = [
  itemType: bigint,
  token: string,
  identifierOrCriteria: bigint,
  startAmount: bigint,
  endAmount: bigint,
  recipient: string
] & {
  itemType: bigint;
  token: string;
  identifierOrCriteria: bigint;
  startAmount: bigint;
  endAmount: bigint;
  recipient: string;
};

export type OrderParametersStruct = {
  offerer: AddressLike;
  zone: AddressLike;
  offer: OfferItemStruct[];
  consideration: ConsiderationItemStruct[];
  orderType: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  zoneHash: BytesLike;
  salt: BigNumberish;
  conduitKey: BytesLike;
  totalOriginalConsiderationItems: BigNumberish;
};

export type OrderParametersStructOutput = [
  offerer: string,
  zone: string,
  offer: OfferItemStructOutput[],
  consideration: ConsiderationItemStructOutput[],
  orderType: bigint,
  startTime: bigint,
  endTime: bigint,
  zoneHash: string,
  salt: bigint,
  conduitKey: string,
  totalOriginalConsiderationItems: bigint
] & {
  offerer: string;
  zone: string;
  offer: OfferItemStructOutput[];
  consideration: ConsiderationItemStructOutput[];
  orderType: bigint;
  startTime: bigint;
  endTime: bigint;
  zoneHash: string;
  salt: bigint;
  conduitKey: string;
  totalOriginalConsiderationItems: bigint;
};

export type AdvancedOrderStruct = {
  parameters: OrderParametersStruct;
  numerator: BigNumberish;
  denominator: BigNumberish;
  signature: BytesLike;
  extraData: BytesLike;
};

export type AdvancedOrderStructOutput = [
  parameters: OrderParametersStructOutput,
  numerator: bigint,
  denominator: bigint,
  signature: string,
  extraData: string
] & {
  parameters: OrderParametersStructOutput;
  numerator: bigint;
  denominator: bigint;
  signature: string;
  extraData: string;
};

export type FulfillmentComponentStruct = {
  orderIndex: BigNumberish;
  itemIndex: BigNumberish;
};

export type FulfillmentComponentStructOutput = [
  orderIndex: bigint,
  itemIndex: bigint
] & { orderIndex: bigint; itemIndex: bigint };

export type FulfillmentStruct = {
  offerComponents: FulfillmentComponentStruct[];
  considerationComponents: FulfillmentComponentStruct[];
};

export type FulfillmentStructOutput = [
  offerComponents: FulfillmentComponentStructOutput[],
  considerationComponents: FulfillmentComponentStructOutput[]
] & {
  offerComponents: FulfillmentComponentStructOutput[];
  considerationComponents: FulfillmentComponentStructOutput[];
};

export declare namespace AoriProtocol {
  export type MatchingDetailsStruct = {
    makerOrders: AdvancedOrderStruct[];
    takerOrder: AdvancedOrderStruct;
    fulfillments: FulfillmentStruct[];
    blockDeadline: BigNumberish;
    chainId: BigNumberish;
  };

  export type MatchingDetailsStructOutput = [
    makerOrders: AdvancedOrderStructOutput[],
    takerOrder: AdvancedOrderStructOutput,
    fulfillments: FulfillmentStructOutput[],
    blockDeadline: bigint,
    chainId: bigint
  ] & {
    makerOrders: AdvancedOrderStructOutput[];
    takerOrder: AdvancedOrderStructOutput;
    fulfillments: FulfillmentStructOutput[];
    blockDeadline: bigint;
    chainId: bigint;
  };

  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };
}

export interface AoriProtocolInterface extends Interface {
  getFunction(
    nameOrSignature: "owner" | "seaport" | "settleOrders" | "version"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TradeOccurred"): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "seaport", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settleOrders",
    values: [AoriProtocol.MatchingDetailsStruct, AoriProtocol.SignatureStruct]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seaport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace TradeOccurredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AoriProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): AoriProtocol;
  waitForDeployment(): Promise<this>;

  interface: AoriProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  seaport: TypedContractMethod<[], [string], "view">;

  settleOrders: TypedContractMethod<
    [
      matching: AoriProtocol.MatchingDetailsStruct,
      serverSignature: AoriProtocol.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seaport"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "settleOrders"
  ): TypedContractMethod<
    [
      matching: AoriProtocol.MatchingDetailsStruct,
      serverSignature: AoriProtocol.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TradeOccurred"
  ): TypedContractEvent<
    TradeOccurredEvent.InputTuple,
    TradeOccurredEvent.OutputTuple,
    TradeOccurredEvent.OutputObject
  >;

  filters: {
    "TradeOccurred()": TypedContractEvent<
      TradeOccurredEvent.InputTuple,
      TradeOccurredEvent.OutputTuple,
      TradeOccurredEvent.OutputObject
    >;
    TradeOccurred: TypedContractEvent<
      TradeOccurredEvent.InputTuple,
      TradeOccurredEvent.OutputTuple,
      TradeOccurredEvent.OutputObject
    >;
  };
}
