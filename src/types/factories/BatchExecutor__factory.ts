/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { BatchExecutor, BatchExecutorInterface } from "../BatchExecutor";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Instruction[]",
        name: "instructions",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

export class BatchExecutor__factory {
  static readonly abi = _abi;
  static createInterface(): BatchExecutorInterface {
    return new Interface(_abi) as BatchExecutorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BatchExecutor {
    return new Contract(address, _abi, runner) as unknown as BatchExecutor;
  }
}
